递归的时空间复杂度分析:
    1. 画出递归树。
    2. 找出从root到left最长的那个路径，路径上的每个节点的时间复杂度加起来就是该递归方法的时间复杂度。
    3. 这个递归树所有的节点的空间复杂度加起来就是该递归方法的空间复杂度。

1. 斐波那契数列. 0,1,1,2,3,5,8,13....这个数列从第三项起，每一项都等于前两项之和。

    完成代码如下:
        解法一: 动态规划。
            public int fibonacci(int K) {
                if (K <= 0) return 0;
                if (K <= 2) return 1;
                int[] dp = new int[K + 1];
                dp[0] = 0;
                dp[1] = 1;
                dp[2] = 1;
                for (int i = 3; i <= K; i++) {
                    dp[i] = dp[i - 1] + dp[i - 2];
                }
                return dp[K];
            }

        解法二: 迭代。
            public int fibonacci(int K) {
                if (K <= 0) return 0;
                if (K <= 2) return 1;
                int first = 1, second = 1, sum = 0;
                for (int i = 3; i <= K; i++) {
                    sum = first + second;
                    first =second;
                    second = sum;
                }
                return sum;
            }
    
2. Sorting Algorithms.
    1. 选择排序
        它第一次从未排序的数据元素中选出最大or最小的元素，放到序列最起始的位置。然后从剩余的数据元素中，选出最大or最小的元素，放在已排序的数列的最后的位置，直到待
        排序的数据元素的个数为0。选择排序是不稳定排序，时间复杂度为O(n^2)，空间复杂度为O(1)。 
        
        完整代码如下:
            public int[] selectionSort(int[] array) {
                if (array == null || array.length == 0) {
                    return array;
                }
                for (int i = 0; i < array.length - 1; i++) {
                    for (int j = i + 1; j <= array.length - 1; j++) {
                        if (array[j] < array[i]) {
                            swap(array, i , j);
                        }
                    }
                }
                return array;
            }

            private void swap(int[] array, int left, int right) {
                int tmp = array[left];
                array[left] = array[right];
                array[right] = tmp;
            }

    2. 归并排序
        

